Sistema operativo utilizado
Linux debian12 6.1.0-18-amd64 #1 SMP PREEMPT_DYNAMIC Debian 6.1.76-1 (2024-02-01) x86_64 GNU/Linux
==== run-san ====
gcc -g -DSAN=1 -fsanitize=address -fsanitize=undefined -Wall -Werror -std=c18  test-compartir.c compartir.c -lm -lpthread -o compartir.bin-san
./compartir.bin-san
Primer test: se invoca 1 acceder despues de compartir
Primer test exitoso
2do. test: se invoca 1 acceder antes que compartir
2do. test exitoso
El test del enunciado
    0: lanzando T4
    1: T4 solicita acceder
 1014: lanzando T3
 1015: T3 solicita acceder
 3014: lanzando T1
 3016: T1 solicita compartir p
 3016: T4 accede a p
 3016: T3 accede a p
 4022: lanzando T2
 4023: T2 solicita acceder
 4023: T2 accede a p
 5017: T4 devuelve
 6024: T2 devuelve
 7017: T3 devuelve
 7018: T1 termina de compartir p
 9019: T1 solicita compartir q
11025: T2 solicita acceder
11025: T2 accede a q
12026: T2 devuelve
12027: T1 termina de compartir q
Test del enunciado exitoso

El test de esfuerzo: se crea 1 thread que comparte 'y'.
200 threads que acceden 30000 veces.  No debe ocurrir un deadlock.
Tomo ~ 4 segundos en mi ryzen 5 3550H
Test de esfuerzo exitoso en 1 segundos
Se hicieron 1627 llamadas a compartir

Felicitaciones: su tarea funciona correctamente
==== run-thr ====
gcc -g -DSAN=1 -fsanitize=thread -Wall -Werror -std=c18  test-compartir.c compartir.c -lm -lpthread -o compartir.bin-thr
./compartir.bin-thr
Primer test: se invoca 1 acceder despues de compartir
Primer test exitoso
2do. test: se invoca 1 acceder antes que compartir
2do. test exitoso
El test del enunciado
    0: lanzando T4
    3: T4 solicita acceder
 1004: lanzando T3
 1009: T3 solicita acceder
 3024: lanzando T1
 3029: T1 solicita compartir p
 3030: T4 accede a p
 3030: T3 accede a p
 4033: lanzando T2
 4039: T2 solicita acceder
 4039: T2 accede a p
 5030: T4 devuelve
 6040: T2 devuelve
 7030: T3 devuelve
 7031: T1 termina de compartir p
 9031: T1 solicita compartir q
11041: T2 solicita acceder
11041: T2 accede a q
12042: T2 devuelve
12043: T1 termina de compartir q
Test del enunciado exitoso

El test de esfuerzo: se crea 1 thread que comparte 'y'.
200 threads que acceden 30000 veces.  No debe ocurrir un deadlock.
Tomo ~ 4 segundos en mi ryzen 5 3550H
Test de esfuerzo exitoso en 7 segundos
Se hicieron 3391 llamadas a compartir

Felicitaciones: su tarea funciona correctamente
==== run-g ====
gcc -g -Wall -Werror -std=c18  test-compartir.c compartir.c -lm -lpthread -o compartir.bin-g
./compartir.bin-g
Primer test: se invoca 1 acceder despues de compartir
Primer test exitoso
2do. test: se invoca 1 acceder antes que compartir
2do. test exitoso
El test del enunciado
    0: lanzando T4
    0: T4 solicita acceder
 1001: lanzando T3
 1001: T3 solicita acceder
 3001: lanzando T1
 3002: T1 solicita compartir p
 3002: T4 accede a p
 3004: T3 accede a p
 4003: lanzando T2
 4003: T2 solicita acceder
 4003: T2 accede a p
 5003: T4 devuelve
 6004: T2 devuelve
 7004: T3 devuelve
 7004: T1 termina de compartir p
 9005: T1 solicita compartir q
11015: T2 solicita acceder
11015: T2 accede a q
12015: T2 devuelve
12015: T1 termina de compartir q
Test del enunciado exitoso

El test de esfuerzo: se crea 1 thread que comparte 'y'.
200 threads que acceden 30000 veces.  No debe ocurrir un deadlock.
Tomo ~ 4 segundos en mi ryzen 5 3550H
Test de esfuerzo exitoso en 1 segundos
Se hicieron 5916 llamadas a compartir

Felicitaciones: su tarea funciona correctamente
==== run ====
gcc -O -DOPT=1 -Wall -Werror -std=c18  test-compartir.c compartir.c -lm -lpthread -o compartir.bin
./compartir.bin
Primer test: se invoca 1 acceder despues de compartir
Primer test exitoso
2do. test: se invoca 1 acceder antes que compartir
2do. test exitoso
El test del enunciado
    0: lanzando T4
    1: T4 solicita acceder
 1001: lanzando T3
 1002: T3 solicita acceder
 3002: lanzando T1
 3002: T1 solicita compartir p
 3002: T4 accede a p
 3002: T3 accede a p
 4002: lanzando T2
 4003: T2 solicita acceder
 4003: T2 accede a p
 5017: T4 devuelve
 6003: T2 devuelve
 7003: T3 devuelve
 7003: T1 termina de compartir p
 9004: T1 solicita compartir q
11014: T2 solicita acceder
11014: T2 accede a q
12022: T2 devuelve
12022: T1 termina de compartir q
Test del enunciado exitoso

El test de esfuerzo: se crea 1 thread que comparte 'y'.
200 threads que acceden 30000 veces.  No debe ocurrir un deadlock.
Tomo ~ 4 segundos en mi ryzen 5 3550H
Test de esfuerzo exitoso en 1 segundos
Se hicieron 1176 llamadas a compartir

Felicitaciones: su tarea funciona correctamente
